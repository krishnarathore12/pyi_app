# -*- coding: utf-8 -*-
"""PYI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ql5Qn-necooUvcTZLWxld8zBL1Hts7h1
"""



import os
os.environ["GEMINI_API_KEY"]='AIzaSyDM3sIaO5riFJ1_b85X4HLY5-KWZNwYoOQ'

import streamlit as st
import PyPDF2

from PyPDF2 import PdfReader

def read_pdf(file):
    reader = PdfReader(file)
    num_pages = len(reader.pages)
    text = ""
    for page in reader.pages:
        text += page.extract_text()
    return text

def make_rag_prompt(query, text, job_profile):
  prompt = ("""You are an AI interviewer conducting an interview based on a passage retrieved from a random article. Your goal is to ask relevant and insightful questions to deepen understanding and elicit valuable information from the interviewee. Your tone should be professional and inquisitive \
  You are interviewing for the following job profile - {job_profile} \
  Start with a question, and then for every answer the user gave, ask another question
  RESPONSE FROM USER: '{query}'
  RESUME: '{text}'
  """).format(query=query,text=text, job_profile=job_profile)

  return prompt

import google.generativeai as genai
def generate_response(prompt):
    gemini_api_key = os.getenv("GEMINI_API_KEY")
    if not gemini_api_key:
        raise ValueError("Gemini API Key not provided. Please provide GEMINI_API_KEY as an environment variable")
    genai.configure(api_key=gemini_api_key)
    model = genai.GenerativeModel('gemini-pro')
    answer = model.generate_content(prompt)
    return answer.text

def generate_answer(txt,query, job_profile):
    prompt = make_rag_prompt(query,
                             txt, job_profile) # joining the relevant chunks to create a single passage
    answer = generate_response(prompt)

    return answer

def generate_questions(text, job_profile):

    # replace this with the code from RAG.ipynb that generates questions
    query = "Create questions from resume given and for job profile "
    answer = generate_answer(text, query,  job_profile)
    return answer

st.title('RAG Question Generator')

uploaded_file = st.file_uploader("Choose a PDF file", type="pdf")
job_profile = st.text_input("Enter the job profile")

if uploaded_file is not None and job_profile:
    text = read_pdf(uploaded_file)
    questions = generate_questions(text, job_profile)
    
    st.write(questions)